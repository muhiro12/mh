#!/usr/bin/env zsh
# ------------------------------------------------------------
#  mh – Minimal Git / GitHub helper
# ------------------------------------------------------------

set -euo pipefail

# ============================================================
# ==  共通処理 / Common Helpers
# ============================================================

fatal(){
  local code=1
  # If first arg is purely digits, treat it as exit code
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    code=$1
    shift
  fi
  print -u2 "❌ $*"
  exit $code
}

note (){
  print "🔹 $*"
}

choose_target() {
  # ワークスペース／プロジェクトを一度だけ検出し、WORKSPACE / PROJECT 変数にセット
  setopt localoptions null_glob
  local repo_name=${PWD:t}
  WORKSPACE=''; PROJECT=''

  for w in *.xcworkspace; do
    [[ ${w:r} == "$repo_name" ]] && { WORKSPACE=$w; break; }
    [[ -z $WORKSPACE ]] && WORKSPACE=$w
  done
  for p in *.xcodeproj; do
    [[ ${p:r} == "$repo_name" ]] && { PROJECT=$p; break; }
    [[ -z $PROJECT ]] && PROJECT=$p
  done
}

merge_pr() {
  # まず Auto-Merge を試行し、許可されていなければ即時マージコミットにフォールバック
  local pr=$1
  if gh pr merge "$pr" --merge --delete-branch --auto >/dev/null 2>&1; then
    note "🟢 PR #$pr を Auto‑Merge に設定しました"
  else
    note "ℹ️ Auto‑Merge が無効のため通常マージを実行"
    gh pr merge "$pr" --merge --delete-branch \
      || fatal 9 "PR マージに失敗しました"
  fi

  # コマンド完了後にリモート追跡ブランチを prune
  git fetch --prune origin
}

push_if_needed() {
  # ローカルとリモートで差分があれば origin にプッシュ
  if [[ -n $(git status --porcelain --untracked-files=no) ]]; then
    fatal 6 "コミットされていない変更があります"
  fi
  if ! git diff --quiet @{u}; then
    note "⬆️ origin へ push"
    git push -u origin "$(git rev-parse --abbrev-ref HEAD)" \
      || fatal 7 "push に失敗しました"
  fi
}

install_gh_core() {
  if command -v gh >/dev/null; then
    note "`gh` は既にインストール済み"
  else
    command -v brew >/dev/null || fatal "Homebrew が必要です: https://brew.sh"
    note "⏬ gh をインストール中…"
    brew install gh
  fi
  note "✅ gh 準備完了 (`gh --version | head -1`)"
}

update_base_branch() {
  # $1 = PR 番号
  local pr=$1
  local base=$(gh pr view "$pr" --json baseRefName -q .baseRefName)
  git checkout "$base"
  # fast-forward で履歴を直線的に更新
  git pull --ff-only origin "$base" \
    || fatal 10 "ベースブランチの fast-forward に失敗しました"
  note "🎉 完了: $base を最新に fast-forward 更新"
}


detect_xcode() {
  choose_target
  local workspace=$WORKSPACE
  local project=$PROJECT
  [[ $workspace || $project ]] || fatal ".xcworkspace / .xcodeproj が見つかりません"

  if [[ -z ${SCHEME:-} ]]; then
    local -a list
    [[ $workspace ]] && list=(-workspace "$workspace") || list=(-project "$project")
    SCHEME=$(xcodebuild $list -list 2>/dev/null |
             awk '/Schemes:/ {f=1;next} f&&NF{print;exit}' | xargs)
  fi
  [[ $SCHEME ]] || fatal "Scheme 自動特定失敗。SCHEME=… で指定可"

  local sim_name
  sim_name=$(xcrun simctl list devices available |
             grep -Eo 'iPhone [^()]+' | head -n1 | xargs)
  DEST="platform=iOS Simulator,OS=latest,name=${sim_name}"

  typeset -ga TARGET=()
  [[ $workspace ]] && TARGET+=(-workspace "$workspace")
  [[ $project   ]] && TARGET+=(-project  "$project")
}

# 指定 Scheme にテストターゲットがあるか判定
has_tests() {
  setopt localoptions null_glob
  local -a list
  [[ $WORKSPACE ]] && list=(-workspace "$WORKSPACE") || list=(-project "$PROJECT")
  xcodebuild "${list[@]}" -scheme "$SCHEME" -list 2>/dev/null \
    | awk '/Test Targets:/ {f=1; next} f && NF {print; exit}' \
    | grep -q .
}

open_xcode() {
  choose_target
  if [[ $WORKSPACE ]]; then
    note "📂 $WORKSPACE を Xcode で開きます"
    open "$WORKSPACE"
  elif [[ $PROJECT ]]; then
    note "📂 $PROJECT を Xcode で開きます"
    open "$PROJECT"
  else
    note "⚠️ Xcode プロジェクトが見つかりません"
  fi
}

build_or_test() {
  detect_xcode
  note "🏗 ${TARGET[*]} | 📛 $SCHEME | 📱 $DEST"

  local log=$(mktemp -t mh_build)

  # ① Build step
  if xcodebuild $TARGET -scheme "$SCHEME" -destination "$DEST" build >"$log" 2>&1; then
    note "✅ ビルド成功"
  else
    open_xcode
    fatal 2 "❌ ビルド失敗\n$(tail -n 20 \"$log\")"
  fi

  # ② Test existence check
  if has_tests; then
    # ③ Test step
    if xcodebuild $TARGET -scheme "$SCHEME" -destination "$DEST" test >"$log" 2>&1; then
      note "✅ テスト成功"
      rm -f "$log"
      return 0
    else
      open_xcode
      fatal 2 "❌ テスト失敗\n$(tail -n 20 \"$log\")"
    fi
  else
    note "ℹ️ テストターゲットなし → スキップ"
    rm -f "$log"
    return 0
  fi
}

# ============================================================
# ==  コマンド実装 / Command Implementations
# ============================================================

run_build() {
  note "🔍 現在ブランチ: $(git rev-parse --abbrev-ref HEAD)"
  build_or_test
}

run_codex() {
  # モード:
  #   normal : PR を取得 → build/test → merge まで実行
  #   resume : 既に PR ブランチ上で build/test → merge のみ実行
  local resume=0
  if [[ "${1:-}" == "-r" || "${1:-}" == "--resume" ]]; then
    resume=1
    shift
  fi

  # --- Remove local branch whose name conflicts with PR head prefix ---
  # Get the remote branch name (e.g., codex/foo)
  local headRef=$(gh pr view "${1:-}" --json headRefName -q .headRefName 2>/dev/null)
  if [[ -n $headRef && $headRef == */* ]]; then
    local prefix=${headRef%%/*}
    if git show-ref --verify --quiet "refs/heads/$prefix"; then
      note "⚠️ ローカルブランチ '$prefix' を削除して名前衝突を回避"
      git branch -D "$prefix"
    fi
  fi

  local pr
  if (( resume == 0 )); then
    # ----- normal mode -----
    pr=${1:-}
    if [[ -z $pr ]]; then
      pr=$(gh pr list --state open --label codex --json number -q '.[0].number')
    fi
    [[ $pr ]] || fatal "Codex PR が見つかりません"

    local title=$(gh pr view "$pr" --json title -q .title)
    note "➡️ PR #$pr «$title» をチェックアウト"
    gh pr checkout "$pr"
  else
    # ----- resume mode -----
    note "🔄 resume モード: 現在ブランチで再ビルド"
    pr=$(gh pr view --json number -q .number) \
      || fatal 8 "このブランチに紐づく PR が見つかりません"
  fi

  build_or_test

  push_if_needed

  note "🟢 マージ"
  merge_pr "$pr"

  update_base_branch "$pr"
}

run_debug() {
  run_help
}

run_install() {
  install_gh_core
}

run_main() {
  local dev_branch=${DEV_BRANCH:-develop}
  local main_branch=${MAIN_BRANCH:-main}

  note "➡️ $main_branch へチェックアウト"
  git checkout "$main_branch"

  note "🔄 $dev_branch を fast-forward 取り込み"
  git pull --no-ff origin "$dev_branch"

  note "⬆️ Push $main_branch"
  git push origin "$main_branch"

  note "↩️ $dev_branch へ戻る"
  git checkout "$dev_branch"
  note "🎉 完了: $main_branch を最新 $dev_branch で更新しました"
}

run_update() {
  #   mh -u           → GitHub raw を ~/bin/mh へ
  #   mh -u -l        → ./mh を ~/bin/mh へコピー
  local use_local=0
  if [[ "${1:-}" == "-l" || "${1:-}" == "--local" ]]; then
    use_local=1
  fi

  local BIN="$HOME/bin/mh"
  local RAW_URL="https://raw.githubusercontent.com/muhiro12/mh/refs/heads/main/mh"

  if (( use_local )); then
    [[ -f ./mh ]] || fatal 3 "./mh が見つかりません"
    cp ./mh "$BIN" || fatal 3 "コピー失敗"
  else
    curl -fsSL "$RAW_URL" -o "$BIN" || fatal 4 "mh のダウンロードに失敗"
  fi

  chmod 755 "$BIN"
  note "✅ $BIN を更新しました"
}

# ============================================================
# ==  ヘルプ / Help
# ============================================================

run_help() {
cat <<'EOS'
mh - Minimal helper

  -b, --build             現在ブランチを build / test だけ実行
  -c, --codex [-r|--resume] [<PR#>] Codex PR を build / test → merge → ベース更新
  -d, --debug [<mode>]    デバッグ用コマンド（デフォルトはヘルプ表示）
  -i, --install           gh (GitHub CLI) を Homebrew で導入
  -m, --main              main を develop で fast-forward し、push 後 develop に戻る
  -u, --update [-l|--local] GitHub 版 (または -l / --local で ./mh) を ~/bin/mh に反映
  -h, --help              このヘルプ

環境変数:
  SCHEME=<scheme>         Scheme 自動判定を上書き
  DEV_BRANCH=<name>       develop 以外を使う場合
  MAIN_BRANCH=<name>      main 以外を使う場合
EOS
}

# ============================================================
# ==  コマンド列挙 / Main Dispatch
# ============================================================

ROOT=$(git -C . rev-parse --show-toplevel 2>/dev/null) ||
  fatal "Git リポジトリ外です"
cd "$ROOT"

case "${1:-}" in
  -b|--build)   run_build ;;              # B
  -c|--codex)   shift; run_codex "$@" ;;  # C
  -d|--debug)   run_debug ;;              # D
  -i|--install) run_install ;;            # I
  -m|--main)    run_main ;;               # M
  -u|--update)  shift; run_update "$@" ;; # U
  -h|--help|*)  run_help ;;               # help (last)
esac

exit 0
