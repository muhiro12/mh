#!/usr/bin/env zsh
# ------------------------------------------------------------
#  mh – Minimal Git / GitHub helper
# ------------------------------------------------------------
set -euo pipefail
fatal(){
  local code=1
  # If first arg is purely digits, treat it as exit code
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    code=$1
    shift
  fi
  print -u2 "❌ $*"
  exit $code
}
note (){ print "🔹 $*" }

# ---------- ❶ 関数 ------------------------------------------

install_gh() {
  if command -v gh >/dev/null; then
    note "`gh` は既にインストール済み"
  else
    command -v brew >/dev/null || fatal "Homebrew が必要です: https://brew.sh"
    note "⏬ gh をインストール中…"
    brew install gh
  fi
  note "✅ gh 準備完了 (`gh --version | head -1`)"
}

detect_xcode() {
  setopt localoptions null_glob
  local repo_name=${PWD:t}
  local workspace='' project=''
  # Prefer workspace/project whose basename matches repo root
  for w in *.xcworkspace; do
    [[ ${w:r} == "$repo_name" ]] && { workspace=$w; break; }
    [[ -z $workspace ]] && workspace=$w
  done
  for p in *.xcodeproj; do
    [[ ${p:r} == "$repo_name" ]] && { project=$p; break; }
    [[ -z $project ]] && project=$p
  done
  [[ $workspace || $project ]] || fatal ".xcworkspace / .xcodeproj が見つかりません"

  if [[ -z ${SCHEME:-} ]]; then
    local -a list
    [[ $workspace ]] && list=(-workspace "$workspace") || list=(-project "$project")
    SCHEME=$(xcodebuild $list -list 2>/dev/null |
             awk '/Schemes:/ {f=1;next} f&&NF{print;exit}' | xargs)
  fi
  [[ $SCHEME ]] || fatal "Scheme 自動特定失敗。SCHEME=… で指定可"

  local sim_name
  sim_name=$(xcrun simctl list devices available |
             grep -Eo 'iPhone [^()]+' | head -n1 | xargs)
  DEST="platform=iOS Simulator,OS=latest,name=${sim_name}"

  typeset -ga TARGET=()
  [[ $workspace ]] && TARGET+=(-workspace "$workspace")
  [[ $project   ]] && TARGET+=(-project  "$project")
}

open_xcode() {
  setopt localoptions null_glob
  local workspace='' project=''
  for w in *.xcworkspace; do workspace=$w; break; done
  for p in *.xcodeproj;   do project=$p; break; done
  if [[ $workspace ]]; then
    note "📂 $workspace を Xcode で開きます"
    open "$workspace"
  elif [[ $project ]]; then
    note "📂 $project を Xcode で開きます"
    open "$project"
  else
    note "⚠️ Xcode プロジェクトが見つかりません"
  fi
}


build_or_test() {
  detect_xcode
  note "🏗 ${TARGET[*]} | 📛 $SCHEME | 📱 $DEST"

  local log=$(mktemp -t mh_build)

  # ① 常に test を試行
  if xcodebuild $TARGET -scheme "$SCHEME" -destination "$DEST" test >"$log" 2>&1 ; then
    note "✅ テスト成功"
    rm -f "$log"; return 0
  fi

  # ② テストなし判定（エラーメッセージに 'No tests' が含まれる場合）
  if grep -qiE 'no tests? were found|Testing failed.*No tests' "$log"; then
    note "ℹ️ テストなし → build のみ実行"
    if xcodebuild $TARGET -scheme "$SCHEME" -destination "$DEST" build >>"$log" 2>&1 ; then
      note "✅ ビルド成功（テストなし）"
      rm -f "$log"; return 0
    fi
  fi

  # ③ 失敗：Xcode を開き、exit code 2
  open_xcode
  fatal 2 "❌ ビルド/テスト失敗\n$(tail -n 20 \"$log\")"
}

run_build() {
  note "🔍 現在ブランチ: $(git rev-parse --abbrev-ref HEAD)"
  build_or_test
}

run_codex() {
  local pr=${1:-}
  gh auth status -h github.com >/dev/null || fatal "`gh auth login` を実行してください"

  if [[ -z $pr ]]; then
    pr=$(gh pr list --state open --label codex --json number -q '.[0].number')
  fi
  [[ $pr ]] || fatal "Codex PR が見つかりません"
  local title=$(gh pr view "$pr" --json title -q .title)

  note "➡️ PR #$pr «$title» をチェックアウト"
  gh pr checkout "$pr"

  build_or_test

  note "🟢 マージ"
  gh pr merge "$pr" --merge --delete-branch --auto

  local base=$(gh pr view "$pr" --json baseRefName -q .baseRefName)
  git checkout "$base"
  git pull --ff-only
  note "🎉 完了: $base を最新に更新"
}

sync_main() {
  local dev_branch=${DEV_BRANCH:-develop}
  local main_branch=${MAIN_BRANCH:-main}

  note "➡️ $main_branch へチェックアウト"
  git checkout "$main_branch"

  note "🔄 $dev_branch を fast-forward 取り込み"
  git pull --ff-only origin "$dev_branch"

  note "⬆️ Push $main_branch"
  git push origin "$main_branch"

  note "↩️ $dev_branch へ戻る"
  git checkout "$dev_branch"
  note "🎉 完了: $main_branch を最新 $dev_branch で更新しました"
}

sync_mh() {
  #   mh -u           → GitHub raw を ~/bin/mh へ
  #   mh -u -l        → ./mh を ~/bin/mh へコピー
  local use_local=0
  if [[ "${1:-}" == "-l" ]]; then
    use_local=1
  fi

  local BIN="$HOME/bin/mh"
  local RAW_URL="https://raw.githubusercontent.com/muhiro12/mh/refs/heads/main/mh"

  if (( use_local )); then
    [[ -f ./mh ]] || fatal 3 "./mh が見つかりません"
    cp ./mh "$BIN" || fatal 3 "コピー失敗"
  else
    curl -fsSL "$RAW_URL" -o "$BIN" || fatal 4 "mh のダウンロードに失敗"
  fi

  chmod 755 "$BIN"
  note "✅ $BIN を更新しました"
}

run_resume() {
  # ワークフロー:
  # 1) ローカル変更を build/test
  # 2) origin へ push（差分があれば）
  # 3) PR をマージ
  # 4) ベースブランチに切替え fast‑forward pull
  local branch=$(git rev-parse --abbrev-ref HEAD)
  [[ $branch == codex/* || $branch == pr/* || $branch == feature/* ]] \
    || fatal 5 "現在ブランチ ($branch) は Codex PR ではありません"

  # ビルド / テスト
  build_or_test

  # push が必要か判定
  if [[ -n $(git status --porcelain --untracked-files=no) ]]; then
    fatal 6 "コミットされていない変更があります"
  fi
  if ! git diff --quiet @{u}; then
    note "⬆️ origin へ push"
    git push -u origin "$branch" || fatal 7 "push に失敗しました"
  fi

  # PR 番号とベースブランチ取得
  local pr=$(gh pr view --json number -q .number) \
    || fatal 8 "このブランチに紐づく PR が見つかりません"
  local base=$(gh pr view "$pr" --json baseRefName -q .baseRefName)

  # マージ
  note "🟢 マージ PR #$pr"
  gh pr merge "$pr" --merge --delete-branch --auto \
    || fatal 9 "PR マージに失敗しました"

  # ベースブランチに戻り更新
  git checkout "$base"
  git pull --ff-only
  note "🎉 完了: $base を最新に更新しました"
}

show_help() {
cat <<'EOS'
mh - Minimal helper

  -h, --help              このヘルプ
  -i, --install           gh (GitHub CLI) を Homebrew で導入
  -b, --build             現在ブランチを build / test だけ実行
  -c, --codex [<PR#>]     Codex PR → build / test → merge → ベース更新
  -m, --main              main を develop で fast-forward し、push 後 develop に戻る
  -u, --update [-l]       GitHub 版 (または -l で ./mh) を ~/bin/mh に反映
  -r, --resume            現在 PR ブランチを build/test → push → merge → ベース更新

環境変数:
  SCHEME=<scheme>         Scheme 自動判定を上書き
  DEV_BRANCH=<name>       develop 以外を使う場合
  MAIN_BRANCH=<name>      main 以外を使う場合
EOS
}

# ---------- ❷ メイン -----------------------------------------

ROOT=$(git -C . rev-parse --show-toplevel 2>/dev/null) ||
  fatal "Git リポジトリ外です"
cd "$ROOT"

case "${1:-}" in
  -i|--install) install_gh ;;
  -b|--build)   run_build ;;
  -c|--codex)   shift; run_codex "$@" ;;
  -m|--main)    sync_main ;;
  -u|--update)  shift; sync_mh "$@" ;;
  -r|--resume)  run_resume ;;
  -h|--help|*)  show_help ;;
esac

exit 0
